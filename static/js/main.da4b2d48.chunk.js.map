{"version":3,"sources":["movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenre","_ref2","genre","react_default","a","createElement","className","MoviePoster","_ref3","poster","alt","console","log","src","title","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_movie_0","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callAPI","sent","setState","stop","fetch","then","response","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAiEA,SAASA,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBJ,EAAhC,KAGR,SAASK,EAATC,GAAoC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAE3B,OADAC,QAAQC,IAAIH,GAERN,EAAAC,EAAAC,cAAA,OAAKQ,IAAKJ,EAAQC,IAAOA,EAAKI,MAASJ,EAAKJ,UAAU,kBAW/CS,MA/Df,SAAAC,GAAiD,IAAjCF,EAAiCE,EAAjCF,MAAOL,EAA0BO,EAA1BP,OAAQQ,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACnC,OACIf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACE,EAAD,CAAaE,OAAUA,EAAQC,IAAOI,KAE1CX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UAAKS,GACLX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVW,EAAOE,IAAI,SAACjB,EAAMkB,GAAP,OAAiBjB,EAAAC,EAAAC,cAACL,EAAD,CAAYE,MAASA,EAAOmB,IAAOD,OAEpEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CACImB,KAAQL,EACRM,QAAQ,IACRC,SAAW,MACXC,WAAS,EACTC,QAAQ,gBCkBjBC,6MA7CbC,MAAQ,KAORC,cAAgB,WAYb,OAVcC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GAEnC,OADAtB,QAAQC,IAAIqB,GACL9B,EAAAC,EAAAC,cAAC6B,EAAD,CACLpB,MAASmB,EAAMnB,MACfL,OAASwB,EAAME,mBACfd,IAAOY,EAAMG,GACbnB,OAAUgB,EAAMhB,OAChBC,SAAYe,EAAMf,gBAKxBmB,gCAAa,SAAAC,IAAA,IAAAN,EAAA,OAAAO,EAAAnC,EAAAoC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUZ,EAAKa,WADf,OACLZ,EADKS,EAAAI,KAEXd,EAAKe,SAAS,CACZd,WAHS,wBAAAS,EAAAM,SAAAT,QAMbM,SAAW,WACT,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKpB,SACvBqB,MAAM,SAAAC,GAAG,OAAI3C,QAAQC,IAAI0C,yFA5B1BC,KAAKlB,8CA+BE,IACAL,EAAUuB,KAAK1B,MAAfG,OACP,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAY0B,EAAQ,MAAQ,gBAC/BA,EAASuB,KAAKzB,gBAAkB,kBA7CtB0B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.da4b2d48.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './movie.css';\nimport LinesEllipsis from 'react-lines-ellipsis'\n/*\nclass Movie extends Component{\n    static propTypes = {\n         title : PropTypes.string.isRequired,\n         poster : PropTypes.string.isRequired\n    }\n    render(){\n        \n        return (\n            <div>\n                <MoviePoster poster = {this.props.poster}/>\n                <h1>{this.props.title}</h1>\n            </div>\n        )\n    }\n}\n*/\nfunction Movie({title, poster, genres, synopsis}){\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie__Columns\">\n                <MoviePoster poster = {poster} alt = {title}/>    \n            </div>\n            <div className=\"Movie__Columns\">\n                <h1>{title}</h1>    \n                <div className=\"Movie__Genres\">\n                    {genres.map((genre,index) => <MovieGenre genre = {genre} key = {index}/>)}\n                </div>\n                <div className=\"Movie__synopsis\">\n                    <LinesEllipsis\n                        text = {synopsis}\n                        maxLine='3'\n                        ellipsis = '...'\n                        trimRight\n                        basedOn='letters'\n                    />\n                </div>\n            </div>\n            \n        </div>\n    )\n}\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\n/*\nclass MoviePoster extends Component{\n    static propTypes = {\n        poster: PropTypes.string.isRequired\n    }\n    render(){\n        //console.log(this.props);\n        return (\n            <img src = {this.props.poster}/>\n        )\n    }\n}\n*/\nfunction MovieGenre({genre}){\n    return (\n        <span className=\"Movie__Genre\">{genre} </span>\n    )\n}\nfunction MoviePoster ({poster, alt}){    // poster 와 {poster}의 차이점???\n    console.log(poster);\n    return (\n        <img src={poster} alt = {alt} title = {alt} className=\"Movie__Poster\"/>\n        // img src = {this.props.poster} alt = \"movie posters\"/>   이게 왜 안될까. class가 아니면 props는 없는건가. A) Class가 아니라 this props가 없다. 이미 인자로 poster props를 받았기 때문에\n    )\n}\nMovieGenre.propTypes = {\n    genre : PropTypes.string.isRequired\n}\nMoviePoster.propTypes = {\n    poster : PropTypes.string.isRequired,\n    alt : PropTypes.string.isRequired\n}\nexport default Movie;\n\n","import React, {Component} from 'react';\nimport './App.css';\nimport Movie from './movie.js';\n\nclass App extends Component {\n  /*\n  componentWillMount(){\n    console.log(\"will mount\");\n  }\n  */\n\n  state = {\n  }\n  componentDidMount(){\n    this._getMovies();\n  }\n  \n\n  _renderMovies = () => {\n\n    const movies = this.state.movies.map(movie => {\n      console.log(movie);\n      return <Movie \n        title = {movie.title} \n        poster ={movie.medium_cover_image} \n        key = {movie.id} \n        genres = {movie.genres}\n        synopsis = {movie.synopsis}\n        />\n     })\n     return movies\n  }\n  _getMovies = async () => {\n    const movies = await this._callAPI()\n    this.setState({\n      movies\n    })\n  }\n  _callAPI = () => {\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err));\n  }\n  \n  render (){\n    const {movies} = this.state;\n    return (\n      <div className= {movies? 'App' : 'App--Loading'}>\n       {movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}